name: Packer Image Build on PR Merge

on:
  pull_request:
    branches:
      - main
    types:
      - closed # Runs workflow when a pull request is merged

jobs:
  build-packer-image:
    if: github.event.pull_request.merged == true
    name: Package Application and Build Packer AMI
    runs-on: ubuntu-latest
    environment: development

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_DEV_IAM_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_DEV_IAM_SECRET_KEY }}
      GCP_ACCESS_KEY: ${{ secrets.GCP_ACCESS_KEY }}

      # Application Variables
      DB_URL: ${{ secrets.DB_URL }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}

      # Packer Variables
      # PKR_VAR_DB_URL: ${{ secrets.DB_URL }}
      # PKR_VAR_PRT_NBR: ${{ secrets.PORT }}
      # PKR_VAR_DB_USERNAME: ${{ secrets.DB_USERNAME }}
      # PKR_VAR_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      # PKR_VAR_DB_NAME: ${{ secrets.DB_NAME }}
      PKR_VAR_SUBNET_ID: ${{ secrets.AWS_SUBNET_ID }}
      PKR_VAR_AMI_USER: ${{ secrets.AWS_DEMO_ACCOUNT_ID }}
      PKR_VAR_AWS_REGION: ${{ secrets.AWS_REGION }}
      PKR_VAR_OWNER_ID: ${{ secrets.UBUNTU_OWNER_ID }}
      PKR_VAR_AWS_INSTANCE_TYPE: ${{ secrets.AWS_INSTANCE_TYPE }}
      # PKR_VAR_GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      # PKR_VAR_GCP_MACHINE_TYPE: ${{ secrets.GCP_MACHINE_TYPE }}
      # PKR_VAR_GCP_DEMO_PROJECT_ID: ${{ secrets.GCP_DEMO_PROJECT_ID }}
      # PKR_VAR_GCP_ZONE: ${{ secrets.GCP_ZONE }}

    services:
      mysql:
        image: mysql:8
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_URL: ${{ secrets.DB_URL }}
          MYSQL_ROOT_USERNAME: ${{ secrets.DB_USERNAME }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_DEV_IAM_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_DEV_IAM_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # - name: Configure GCP Credentials
      #   uses: google-github-actions/auth@v1
      #   with:
      #     credentials_json: ${{ secrets.GCP_ACCESS_KEY }}

      # - name: Setting up GCP SDK
      #   uses: google-github-actions/setup-gcloud@v2

      # - name: Setting GCP Access Key
      #   run: |
      #     echo '${{ secrets.GCP_ACCESS_KEY }}' >> .gcp-key.json

      - name: Set Up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Build the HealthCheck JAR file and Run Tests
        run: |
          cd HealthCheck  # Navigate to Spring Boot app directory
          mvn clean -B package

      - name: Install Packer
        uses: hashicorp/setup-packer@main

      - name: Initialize Packer
        working-directory: packer
        run: |
          packer init aws_ami.pkr.hcl

      - name: Run Packer fmt Check
        working-directory: packer
        run: |
          packer fmt -check -diff aws_ami.pkr.hcl

      - name: Run Packer Validate (AWS)
        working-directory: packer
        run: |
          packer validate aws_ami.pkr.hcl

      # - name: Run Packer Validate (GCP)
      #   working-directory: packer
      #   run: |
      #     packer validate gcp_image.pkr.hcl

      # The AMI ID is stored as both an environment variable and a step output.
      - name: Build AWS AMI with Packer & Capture AMI ID INTO ENVIRONMENT
        id: packer_aws # Unique ID for AWS build step
        run: |
          cd packer
          packer build aws_ami.pkr.hcl

          AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)
          echo "AMI_ID=${AMI_ID}" >> $GITHUB_ENV
          echo "ami_id=${AMI_ID}" >> $GITHUB_OUTPUT

      # - name: Build GCP IMAGE with Packer
      #   id: packer_gcp  # Unique ID for GCP build step
      #   run: |
      #     cd packer
      #     packer build gcp_image.pkr.hcl

      # - name : Sharing GCP Image to Demo Project
      #   env:
      #     GCP_ACCOUNT_ID: ${{ secrets.GCP_PROJECT_ID }}
      #     DEMO_GCP_ACCOUNT_ID: ${{ secrets.GCP_DEMO_PROJECT_ID }}
      #   run: |
      #     echo "Sharing image from DEV to DEMO project"
      #     gcloud compute images create "csye6225-health-checker-gcp-${formatdate("YYYY-MM-DD-HH-mm-ss", timestamp()))" \
      #       --source-image="$GCP_IMAGE_NAME" \
      #       --source-image-project="$GCP_PROJECT_ID" \
      #       --project="$GCP_DEMO_PROJECT_ID" \
      #       --description="Image for CSYE6225 Health Checker shared from Dev Project"

      # DEMO ACCOUNT CONFIGURATION

      # This switches AWS credentials to the DEMO account for the remaining steps.
      - name: Configure AWS credentials for DEMO account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Wait for AMI to be available in Demo account
        run: |
          echo "Waiting for AMI to be available in Demo account..."
          while ! aws ec2 describe-images --image-ids ${{ env.AMI_ID }} > /dev/null 2>&1; do
            echo "AMI not yet available, waiting..."
            sleep 30
          done
          echo "AMI is now available in Demo account!"

      # This finds the launch template by tag name, then creates a new version with the updated AMI ID. The IDs are stored as environment variables.
      - name: Update Launch Template with new AMI
        id: update-launch-template
        run: |
          # Get current Launch Template ID using tag
          LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates \
            --filters "Name=tag:Name,Values=health-checker-lt" \
            --query "LaunchTemplates[0].LaunchTemplateId" \
            --output text)

          echo "Found Launch Template ID: ${LAUNCH_TEMPLATE_ID}"
            
          # Create new version with the latest AMI ID
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id ${LAUNCH_TEMPLATE_ID} \
            --version-description "AMI update to ${AMI_ID}" \
            --source-version '$Latest' \
            --launch-template-data "{\"ImageId\":\"${AMI_ID}\"}" \
            --query "LaunchTemplateVersion.VersionNumber" \
            --output text)
            
          echo "LAUNCH_TEMPLATE_ID=${LAUNCH_TEMPLATE_ID}" >> $GITHUB_ENV
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV

      # This finds the Auto Scaling Group by tag, updates it to use the new launch template version, and starts an instance refresh process.
      # Mention Tagname.......
      - name: Start instance refresh for ASG
        id: start-instance-refresh
        run: |
          # Find ASG using tag
          ASG_NAME=$(aws autoscaling describe-auto-scaling-groups \
            --filters "Name=tag-key,Values=Name" "Name=tag-value,Values=health-checker-asg" \
            --query "AutoScalingGroups[0].AutoScalingGroupName" \
            --output text)
            
          echo "Found Auto Scaling Group: ${ASG_NAME}"
            
          # Update ASG to use latest launch template version
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${ASG_NAME} \
            --launch-template LaunchTemplateId=${LAUNCH_TEMPLATE_ID},Version=${NEW_VERSION}
            
          # Start instance refresh
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${ASG_NAME} \
            --preferences '{"MinHealthyPercentage": 90, "InstanceWarmup": 300}' \
            --query "InstanceRefreshId" \
            --output text)
            
          echo "ASG_NAME=${ASG_NAME}" >> $GITHUB_ENV
          echo "REFRESH_ID=${REFRESH_ID}" >> $GITHUB_ENV

      - name: Wait for instance refresh to complete
        run: |
          echo "Waiting for instance refresh ${REFRESH_ID} to complete..."

          while true; do
            REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${ASG_NAME} \
              --instance-refresh-ids ${REFRESH_ID} \
              --query "InstanceRefreshes[0].Status" \
              --output text)
              
            echo "Current status: ${REFRESH_STATUS}"
            
            if [ "${REFRESH_STATUS}" == "Successful" ]; then
              echo "Instance refresh completed successfully!"
              exit 0
            elif [ "${REFRESH_STATUS}" == "Failed" ] || [ "${REFRESH_STATUS}" == "Cancelled" ]; then
              echo "Instance refresh failed or was cancelled!"
              exit 1
            else
              echo "Instance refresh still in progress. Waiting 30 seconds..."
              sleep 30
            fi
          done
